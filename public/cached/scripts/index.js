/*
  Adapatation of:
  - https://github.com/web-push-libs/web-push
  - https://serviceworke.rs/push-payload.html
*/

const vapidPublicKey = 'BK6Bbs6pLR_nDoKecd9oFrCVwE6BQGsqsbAE-zuN8O-DO5-WSgNY3evaTrqvLdvJt5VFTrvYolLfiZiAcveI4FQ';

let endpoint;
let key;
let authSecret;

const urlBase64ToUint8Array = (base64String) => {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding)
    .replace(/\-/g, '+')
    .replace(/_/g, '/');

  const rawData = window.atob(base64);
  const outputArray = new Uint8Array(rawData.length);

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
};

// Register a Service Worker.
navigator.serviceWorker.register('/service-worker.js');
navigator.serviceWorker.ready.then(registration => registration.pushManager.getSubscription()
    .then((subscription) => {
      // If a subscription was found, return it.
      if (subscription) return subscription;

      // Otherwise, subscribe the user (userVisibleOnly allows to specify that we don't plan to
      // send notifications that don't have a visible effect for the user).
      const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);

      return registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: convertedVapidKey,
      });
    })
  ).then((subscription) => {
    // Retrieve the user's public key.
    const rawKey = subscription.getKey
      ? subscription.getKey('p256dh')
      : '';
    key = rawKey
      ? btoa(String.fromCharCode.apply(null, new Uint8Array(rawKey)))
      : '';

    const rawAuthSecret = subscription.getKey
      ? subscription.getKey('auth')
      : '';
    authSecret = rawAuthSecret
      ? btoa(String.fromCharCode.apply(null, new Uint8Array(rawAuthSecret)))
      : '';

    endpoint = subscription.endpoint;

    // Send the subscription details to the server using the Fetch API.
    fetch('./api/push/register', {
      method: 'post',
      headers: { 'Content-type': 'application/json' },
      body: JSON.stringify({
        endpoint: subscription.endpoint,
        key,
        authSecret,
      }),
    });
  });

document.getElementById('doIt').onclick = () => {
  // Ask the server to send the client a notification (for testing purposes, in actual
  // applications the push notification is likely going to be generated by some event
  // in the server).
  fetch('./api/push/sendNotification', {
    method: 'post',
    headers: { 'Content-type': 'application/json' },
    body: JSON.stringify({
      endpoint,
      key,
      authSecret,
    }),
  });
};
